name: Azure Pipeline

variables:
 - group: azureCredentials

trigger:
- main

stages:
#--------------------------------------------#
# BUILD STAGE
#--------------------------------------------#
- stage: Infrastructure
  jobs:
  - job: BuildInfrastructure
    displayName: BuildInfrastructure
    pool: myAgentPool
    steps:
    - task: DownloadSecureFile@1
      displayName: Downloading azure conf file
      name: azureCredentials
      inputs:
        secureFile: 'azureCredentials.conf'
    # Install SSH Key for VM
    - task: InstallSSHKey@0
      displayName: Installing SSH key
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: $(public_key)
        sshKeySecureFile: 'id_rsa'
    #--------------------------------------------#
    # Use Terraform to create the Infrastructure
    # Install Terraform on the pipeline agent
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: 'latest'

    # Run Terraform Init on the pipeline agent
    #Terraform Init
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'myServiceConnection'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate2069818206'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
    # ToDo: Run Terraform Validate
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
    # ToDo: Run Terraform Validate
    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformCLI@0
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'myServiceConnection'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline.
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
- stage: Build
  jobs:
      - job: Build_Artifacts
        displayName: Build Artifacts
        pool: myAgentPool
        steps:
          - task: ArchiveFiles@2
            displayName: Archive Fakerestapi
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'

          - task: PublishPipelineArtifact@1
            displayName: Publish Fakerestapi as Artifact
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
              artifactName: 'drop-fakerestapi'

          - task: ArchiveFiles@2
            displayName: Archive Selenium
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium Artifact
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
              artifactName: 'drop-selenium'

          - task: ArchiveFiles@2
            displayName: 'Archive PerformanceTestSuite'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/jtest-$(Build.BuildId).zip'
          - task: PublishBuildArtifacts@1
            displayName: Publish Jmeter test
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/jtest-$(Build.BuildId).zip'
              ArtifactName: 'drop-jtest'
