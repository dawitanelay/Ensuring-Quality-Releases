name: Azure Pipeline

variables:
  - group: azureCredentials

trigger:
  - main

stages:
  - stage: Infrastructure
    jobs:
      - job: BuildInfrastructure
        displayName: BuildInfrastructure
        pool: myAgentPool
        #downloads azure secureFile
        steps:
          - task: DownloadSecureFile@1
            displayName: Downloading azure conf file
            name: azureCredentials
            inputs:
              secureFile: "azureCredentials.conf"

          # Install SSH Key for VM
          - task: InstallSSHKey@0
            displayName: Installing SSH key
            inputs:
              knownHostsEntry: "known_hosts"
              sshPublicKey: $(public_key)
              sshKeySecureFile: "id_rsa"

          #Terraform Install
          - task: TerraformInstaller@0
            displayName: Installtion
            inputs:
              terraformVersion: "latest"

          #Terraform Init
          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              commandOptions: "-backend-config=$(azureCredentials.secureFilePath)"
              backendType: "azurerm"
              backendServiceArm: "myServiceConnection"
              backendAzureRmResourceGroupName: "Azuredevops"
              backendAzureRmStorageAccountName: "tfstate1216731519"
              backendAzureRmContainerName: "tfstate"
              backendAzureRmKey: "test.terraform.tfstate"
              allowTelemetryCollection:
                true

                # Run Terraform Validate
          - task: TerraformCLI@0
            displayName: Terraform Validate
            inputs:
              command: "validate"
              allowTelemetryCollection: true

          - task: AzureCLI@1
            displayName: Set Environment Variables for Terraform
            inputs:
              azureSubscription: myServiceConnection
              scriptLocation: inlineScript
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              addSpnToEnvironment: true
              inlineScript: |
                export ARM_CLIENT_ID=$(client_id)
                export ARM_CLIENT_SECRET=$(client_secret)
                export ARM_SUBSCRIPTION_ID=$(subscription_id)
                export ARM_TENANT_ID=$(tenant_id)
                echo $(System.DefaultWorkingDirectory)
          #Terraform plan
          - task: TerraformCLI@0
            displayName: "Terraform Plan"
            inputs:
              command: "plan"
              environmentServiceName: "myServiceConnection"
              allowTelemetryCollection: true
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
          #Terraform Apply
          - task: TerraformCLI@0
            displayName: Terraform Apply
            inputs:
              provider: "azurerm"
              command: "apply"
              environmentServiceName: "myServiceConnection"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              allowTelemetryCollection: true
          - task: ArchiveFiles@2
            displayName: "Archive FakeRestAPI"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip"
              replaceExistingArchive: true
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
            displayName: "Upload Package"
            artifact: drop-fakerestapi
          - task: ArchiveFiles@2
            displayName: "Selenium"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Selenium.zip"
              replaceExistingArchive: true
          - publish: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-Selenium.zip"
            artifact: drop-Selenium

  - stage: Deploy
    jobs:
      - deployment: FakeRestAPI
        pool: myAgentPool
        environment: "TEST"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: "myServiceConnection"
                    appType: "webAppLinux"
                    appName: "udacity-AppService"
                    deployToSlotOrASE: true
                    resourceGroupName: "Azuredevops"
                    slotName: "production"
                    package: "$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip"
      - deployment: VMDeploy
        environment:
          name: "TEST"
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  inputs:
                    targetType: "inline"
                    script: |
                      #! /bin/bash

                      sudo apt-get upgrade -y
                      sudo apt-get install python3-pip -y
                      sudo apt-get install unzip -y
                      sudo apt-get install -y chromium-browser
                      wget https://chromedriver.storage.googleapis.com/104.0.5112.29/chromedriver_linux64.zip
                      # install chrome driver
                      unzip chromedriver_linux64.zip
                      sudo mv chromedriver /usr/bin/chromedriver
                      sudo chown root:root /usr/bin/chromedriver
                      sudo chmod +x /usr/bin/chromedriver
                      chromium-browser -version
                      chromedriver --version
                      pip3 install selenium
                      export PATH=$PATH:/usr/bin/chromedriver

  - stage: UI_Tests
    jobs:
      - deployment: UITests
        pool: myAgentPool
        environment:
          name: "TEST"
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  displayName: "Download Selenium"
                  artifact: drop-Selenium
                - task: Bash@3
                  displayName: Selenium UI Tests
                  inputs:
                    targetType: "inline"
                    script: |
                      unzip -o $(Pipeline.Workspace)/drop-Selenium/$(Build.BuildId)-Selenium.zip 
                      sudo mkdir -p /var/log/selenium
                      sudo chmod 664 /var/log/selenium

                      sudo python3 -u login.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
                      cd $(System.DefaultWorkingDirectory)
                      mkdir -p log/selenium
                      pwd
                      sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
                      ls -la
                - task: PublishPipelineArtifact@1
                  displayName: Publish selenium logs
                  inputs:
                    targetPath: "$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log"
                    artifactName: "drop-selenium-logs"
  - stage: Integration_Tests
    jobs:
      - job: IntegrationTests
        displayName: Integration Tests For UI and Selenium
        pool: myAgentPool
        steps:
          - task: CmdLine@2
            displayName: Install Newman
            inputs:
              script: "sudo npm install -g newman"
              workingDirectory: $(System.DefaultWorkingDirectory)
          - task: CmdLine@2
            displayName: Apply Regression Tests
            continueOnError: true
            inputs:
              script: "newman run ./automatedtesting/postman/regression.json --reporters cli,junit --reporter-junit-export ./automatedtesting/postman/TEST-regression.xml"
              workingDirectory: $(System.DefaultWorkingdirectory)
          - task: CmdLine@2
            displayName: Apply Validation Tests
            continueOnError: true
            inputs:
              script: "newman run ./automatedtesting/postman/validation.json --reporters cli,junit --reporter-junit-export ./automatedtesting/postman/TEST-validation.xml"
              workingDirectory: $(System.DefaultWorkingdirectory)
          - task: PublishTestResults@2
            displayName: Publish Test Results
            inputs:
              testResultsFiles: "**/TEST-*.xml"
              searchFolder: "$(System.DefaultWorkingDirectory)/automatedtesting/postman/"
              publishRunAttachments: true

  - stage: Performance_Tests
    jobs:
      - job: PerformanceTest
        pool: myAgentPool
        steps:
          - bash: |
              sudo apt-get install openjdk-11-jre-headless -y
              java -version
              wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz -O jmeter.tgz
              tar xzvf jmeter.tgz
              mkdir -p log/jmeter
          - bash: |
              apache-jmeter-5.5/bin/jmeter -n -t automatedtesting/jmeter/stress_test.jmx \
                                          -l log/jmeter/stress-test-result.csv \
                                          -e -f -o log/jmeter \
                                          -j log/jmeter/jmeter-stress-test.log
          - bash: |
              apache-jmeter-5.5/bin/jmeter -n -t automatedtesting/jmeter/endurance_test.jmx \
                                          -l log/jmeter/endurance-test-result.csv \
                                          -e -f -o log/jmeter \
                                          -j log/jmeter/jmeter-endurance-test.log
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/log/jmeter"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(System.DefaultWorkingDirectory)/log/jmeter-$(Build.BuildId).zip"
              verbose: true
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/log/jmeter"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(System.DefaultWorkingDirectory)/log/jmeter-$(Build.BuildId).zip"
              verbose: true
          - task: PublishPipelineArtifact@1
            displayName: Publish JMeter logs
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/log/jmeter"
              artifactName: "drop-jmeter-logs"
