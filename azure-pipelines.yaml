name: Azure Pipeline

variables:
 - group: azureCredentials

trigger:
- main

stages:
- stage: Infrastructure
  jobs:
  - job:  BuildInfrastructure
    displayName: BuildInfrastructure
    pool: myAgentPool
   #downloads azure secureFile
    steps:
    - task: DownloadSecureFile@1
      displayName: Downloading azure conf file
      name: azureCredentials
      inputs:
        secureFile: 'azureCredentials.conf'

    # Install SSH Key for VM
    - task: InstallSSHKey@0
      displayName: Installing SSH key
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: $(public_key)
        sshKeySecureFile: 'id_rsa'

    #Terraform Install
    - task: TerraformInstaller@0
      displayName:  Installtion
      inputs:
        terraformVersion: 'latest'

    #Terraform Init
    - task: TerraformCLI@0
      displayName:  Terraform Init
      inputs:

        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-backend-config=$(azureCredentials.secureFilePath)'
        backendType: 'azurerm'
        backendServiceArm: 'myServiceConnection'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate2069818206'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        allowTelemetryCollection: true



         # Run Terraform Validate
    - task: TerraformCLI@0
      displayName: Terraform Validate
      inputs:
          command: 'validate'
          allowTelemetryCollection: true

    - task: AzureCLI@1
      displayName:  Environment Variables
      inputs:
        azureSubscription: myServiceConnection
        scriptLocation: inlineScript
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        addSpnToEnvironment: true
        inlineScript: |
            export ARM_CLIENT_ID=$(client_id)
            export ARM_CLIENT_SECRET=$(client_secret)
            export ARM_SUBSCRIPTION_ID=$(subscription_id)
            export ARM_TENANT_ID=$(tenant_id)
            echo $(System.DefaultWorkingDirectory)
    #Terraform plan
    - task: TerraformCLI@0
      displayName: 'Terraform Plan'
      inputs:
          command: 'plan'
          environmentServiceName: 'myServiceConnection'
          allowTelemetryCollection: true
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #Terraform Apply
    - task: TerraformCLI@0
      displayName: Terraform Apply
      inputs:
            provider: 'azurerm'
            command: 'apply'
            environmentServiceName: 'myServiceConnection'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
            allowTelemetryCollection: true

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    pool: myAgentPool
    steps:
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'

    - task: PublishPipelineArtifact@1
      displayName: Publish FakeRestAPI artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'drop-fakerestapi'

    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'

    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'drop-selenium'
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/jtest-$(Build.BuildId).zip'
    - task: PublishBuildArtifacts@1
      displayName: Publish Jmeter test
      inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/jtest-$(Build.BuildId).zip'
              ArtifactName: 'drop-jtest'  
- stage: Deploy
  jobs:
      - deployment: FakeRestAPI
        displayName: Deploy FakeRestAPI
        pool: myAgentPool
        environment: 'TEST'
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureRmWebAppDeployment@4
                displayName: 'Deploy Azure Web App'
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: 'myServiceConnection'
                  appType: 'webApp'
                  WebAppName: 'udacity-AppService'
                  packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip'
                  DeploymentType: zipDeploy
      - deployment: VMDeploy
        displayName: 'Deploy Virtual Machine'
        pool: myAgentPool
        environment: 'TEST'
        strategy:
          runOnce:
             deploy:
               steps:
               - task: Bash@3
                 inputs:
                   targetType: 'inline'
                   script: |
                     #! /bin/bash           
                     sudo apt-get upgrade -y
                     sudo apt-get install unzip -y
                     sudo apt-get install python3  -y
                     sudo apt-get update -y
                     sudo apt-get install python3-pip -y
                     sudo apt-get install -y chromium-browser
                     pip3 --version
                     pip3 install selenium
                     pip3 install --upgrade pip
                     export PATH=$PATH:'usr/bin'
            